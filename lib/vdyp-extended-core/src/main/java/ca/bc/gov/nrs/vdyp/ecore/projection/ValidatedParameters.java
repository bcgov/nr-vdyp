/*
 * Variable Density Yield Projection
 * API for the Variable Density Yield Projection service
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ca.bc.gov.nrs.vdyp.ecore.projection;

import static ca.bc.gov.nrs.vdyp.ecore.model.v1.Parameters.ExecutionOption.*;

import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import ca.bc.gov.nrs.vdyp.ecore.model.v1.FilterParameters;
import ca.bc.gov.nrs.vdyp.ecore.model.v1.Parameters.AgeYearRangeCombinationKind;
import ca.bc.gov.nrs.vdyp.ecore.model.v1.Parameters.DebugOption;
import ca.bc.gov.nrs.vdyp.ecore.model.v1.Parameters.ExecutionOption;
import ca.bc.gov.nrs.vdyp.ecore.model.v1.Parameters.MetadataToOutputDirective;
import ca.bc.gov.nrs.vdyp.ecore.model.v1.Parameters.OutputFormat;
import ca.bc.gov.nrs.vdyp.ecore.model.v1.ProgressFrequency;
import ca.bc.gov.nrs.vdyp.ecore.model.v1.UtilizationClassSet;
import ca.bc.gov.nrs.vdyp.si32.vdyp.SP0Name;

/**
 * This class represents a Parameters instance that has been validated. All fields are converted to their internal data
 * type (if not String). All defaults have been applied.
 */
public class ValidatedParameters {

	public static final ValidatedParameters DEFAULT;

	private OutputFormat outputFormat;
	private EnumSet<ExecutionOption> selectedExecutionOptions = EnumSet.noneOf(ExecutionOption.class);
	private EnumSet<DebugOption> selectedDebugOptions = EnumSet.noneOf(DebugOption.class);
	private Integer ageStart;
	private Integer minAgeStart;
	private Integer maxAgeStart;
	private Integer ageEnd;
	private Integer minAgeEnd;
	private Integer maxAgeEnd;
	private Integer yearStart;
	private Integer minYearStart;
	private Integer maxYearStart;
	private Integer yearEnd;
	private Integer minYearEnd;
	private Integer maxYearEnd;
	private Integer yearForcedIntoYieldTable;
	private Integer ageIncrement;
	private Integer minAgeIncrement;
	private Integer maxAgeIncrement;
	private AgeYearRangeCombinationKind combineAgeYearRange;
	private ProgressFrequency progressFrequency;
	private MetadataToOutputDirective metadataToOutput;
	private FilterParameters filters;
	private Map<SP0Name, UtilizationClassSet> utils = new HashMap<>();

	/**
	 * Helper method that returns "true" iff the given option is in <code>selectedExecutionOptions</code>.
	 *
	 * @param option the option whose presence is determined
	 * @return as described
	 */
	public boolean containsOption(ExecutionOption option) {
		return selectedExecutionOptions.contains(option);
	}

	/**
	 * Helper method that returns "true" iff the given option is in <code>selectedDebugOptions</code>.
	 *
	 * @param option the option whose presence is determined
	 * @return as described
	 */
	public boolean containsOption(DebugOption option) {
		return selectedDebugOptions.contains(option);
	}

	/**
	 * Identifies the output file format. Default: YieldTable
	 *
	 * @return outputFormat
	 */
	public OutputFormat getOutputFormat() {
		return outputFormat;
	}

	public ValidatedParameters outputFormat(OutputFormat outputFormat) {
		this.outputFormat = outputFormat;
		return this;
	}

	public void setOutputFormat(OutputFormat outputFormat) {
		this.outputFormat = outputFormat;
	}

	/**
	 * Get selectedExecutionOptions
	 *
	 * @return selectedExecutionOptions
	 */
	EnumSet<ExecutionOption> getSelectedExecutionOptions() {
		return selectedExecutionOptions;
	}

	public ValidatedParameters selectedExecutionOptions(EnumSet<ExecutionOption> selectedExecutionOptions) {
		setSelectedExecutionOptions(selectedExecutionOptions);
		return this;
	}

	public void setSelectedExecutionOptions(EnumSet<ExecutionOption> selectedExecutionOptions) {
		this.selectedExecutionOptions = EnumSet.copyOf(selectedExecutionOptions);
	}

	/**
	 * Get selectedDebugOptions
	 *
	 * @return selectedDebugOptions
	 */
	public EnumSet<DebugOption> getSelectedDebugOptions() {
		return selectedDebugOptions;
	}

	public ValidatedParameters selectedDebugOptions(EnumSet<DebugOption> selectedDebugOptions) {
		setSelectedDebugOptions(selectedDebugOptions);
		return this;
	}

	public void setSelectedDebugOptions(EnumSet<DebugOption> selectedDebugOptions) {
		this.selectedDebugOptions = EnumSet.copyOf(selectedDebugOptions);
	}

	/**
	 * The starting age value for the Age Range for generated yield tables.
	 *
	 * @return ageStart
	 */
	public Integer getAgeStart() {
		return ageStart;
	}

	public ValidatedParameters ageStart(Integer ageStart) {
		setAgeStart(ageStart);
		return this;
	}

	public void setAgeStart(Integer ageStart) {
		this.ageStart = ageStart;
	}

	Integer getMinAgeStart() {
		return minAgeStart;
	}

	void setMinAgeStart(Integer minAgeStart) {
		this.minAgeStart = minAgeStart;
	}

	Integer getMaxAgeStart() {
		return maxAgeStart;
	}

	void setMaxAgeStart(Integer maxAgeStart) {
		this.maxAgeStart = maxAgeStart;
	}

	/**
	 * The ending age value for the Age Range for generated yield tables.
	 *
	 * @return ageEnd
	 */
	public Integer getAgeEnd() {
		return ageEnd;
	}

	public ValidatedParameters ageEnd(Integer ageEnd) {
		setAgeEnd(ageEnd);
		return this;
	}

	public void setAgeEnd(Integer ageEnd) {
		this.ageEnd = ageEnd;
	}

	Integer getMinAgeEnd() {
		return minAgeEnd;
	}

	void setMinAgeEnd(Integer minAgeEnd) {
		this.minAgeEnd = minAgeEnd;
	}

	Integer getMaxAgeEnd() {
		return maxAgeEnd;
	}

	void setMaxAgeEnd(Integer maxAgeEnd) {
		this.maxAgeEnd = maxAgeEnd;
	}

	/**
	 * The starting year for the Year Range for generated yield tables.
	 *
	 * @return yearStart
	 */
	public Integer getYearStart() {
		return yearStart;
	}

	public ValidatedParameters yearStart(Integer yearStart) {
		setYearStart(yearStart);
		return this;
	}

	public void setYearStart(Integer yearStart) {
		this.yearStart = yearStart;
	}

	Integer getMinYearStart() {
		return minYearStart;
	}

	void setMinYearStart(Integer minYearStart) {
		this.minYearStart = minYearStart;
	}

	Integer getMaxYearStart() {
		return maxYearStart;
	}

	void setMaxYearStart(Integer maxYearStart) {
		this.maxYearStart = maxYearStart;
	}

	/**
	 * The ending year for the Year Range for generated yield tables.
	 *
	 * @return yearEnd
	 */
	public Integer getYearEnd() {
		return yearEnd;
	}

	public ValidatedParameters yearEnd(Integer yearEnd) {
		setYearEnd(yearEnd);
		return this;
	}

	public void setYearEnd(Integer yearEnd) {
		this.yearEnd = yearEnd;
	}

	Integer getMinYearEnd() {
		return minYearEnd;
	}

	void setMinYearEnd(Integer minYearEnd) {
		this.minYearEnd = minYearEnd;
	}

	Integer getMaxYearEnd() {
		return maxYearEnd;
	}

	void setMaxYearEnd(Integer maxYearEnd) {
		this.maxYearEnd = maxYearEnd;
	}

	/**
	 * Forces the inclusion of the specified calendar year in Yield tables.
	 *
	 * @return forceYear
	 */
	public Integer getYearForcedIntoYieldTable() {
		return yearForcedIntoYieldTable;
	}

	public void setYearForcedIntoYieldTable(Integer yearForcedIntoYieldTable) {
		this.yearForcedIntoYieldTable = yearForcedIntoYieldTable;
	}

	/**
	 * The number of years to increment the current value for the Age and Year ranges.
	 *
	 * @return ageIncrement
	 */
	public Integer getAgeIncrement() {
		return ageIncrement;
	}

	public ValidatedParameters ageIncrement(Integer ageIncrement) {
		setAgeIncrement(ageIncrement);
		return this;
	}

	public void setAgeIncrement(Integer ageIncrement) {
		this.ageIncrement = ageIncrement;
	}

	/**
	 * The minimum value ageIncrement may have.
	 *
	 * @return minAgeIncrement
	 */
	public Integer getMinAgeIncrement() {
		return minAgeIncrement;
	}

	public void setMinAgeIncrement(Integer minAgeIncrement) {
		this.minAgeIncrement = minAgeIncrement;
	}

	/**
	 * The maximum value ageIncrement may have.
	 *
	 * @return maxAgeIncrement
	 */
	public Integer getMaxAgeIncrement() {
		return maxAgeIncrement;
	}

	public void setMaxAgeIncrement(Integer maxAgeIncrement) {
		this.maxAgeIncrement = maxAgeIncrement;
	}

	/**
	 * Determines how the Age Range and Year Range are to be combined when producing yield tables.
	 *
	 * @return combineAgeYearRange
	 */
	public AgeYearRangeCombinationKind getCombineAgeYearRange() {
		return combineAgeYearRange;
	}

	public void setCombineAgeYearRange(AgeYearRangeCombinationKind combineAgeYearRange) {
		this.combineAgeYearRange = combineAgeYearRange;
	}

	/**
	 * Get progressFrequency
	 *
	 * @return progressFrequency
	 */
	public ProgressFrequency getProgressFrequency() {
		return progressFrequency;
	}

	public void setProgressFrequency(ProgressFrequency progressFrequency) {
		this.progressFrequency = progressFrequency == null ? null : progressFrequency.copy();
	}

	/**
	 * Controls how much metadata is displayed in the Output and Error Logs.
	 *
	 * @return metadataToOutput
	 */
	public MetadataToOutputDirective getMetadataToOutput() {
		return metadataToOutput;
	}

	public void setMetadataToOutput(MetadataToOutputDirective metadataToOutput) {
		this.metadataToOutput = metadataToOutput;
	}

	/**
	 * Get filters
	 *
	 * @return filters
	 */
	public FilterParameters getFilters() {
		return filters;
	}

	public void setFilters(FilterParameters filters) {
		this.filters = filters == null ? null : filters.copy();
	}

	public Map<SP0Name, UtilizationClassSet> getUtils() {
		return Collections.unmodifiableMap(utils);
	}

	public ValidatedParameters addUtilsItem(SP0Name sp0Name, UtilizationClassSet ucs) {
		if (this.utils == null) {
			this.utils = new HashMap<>();
		}

		this.utils.put(sp0Name, ucs);
		return this;
	}

	public void setUtils(Map<SP0Name, UtilizationClassSet> utils) {
		this.utils = new HashMap<>();
		if (utils != null) {
			utils.entrySet().stream().forEach(e -> this.utils.put(e.getKey(), e.getValue()));
		}
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		ValidatedParameters parameters = (ValidatedParameters) o;
		return Objects.equals(this.outputFormat, parameters.outputFormat)
				&& Objects.equals(this.selectedExecutionOptions, parameters.selectedExecutionOptions)
				&& Objects.equals(this.selectedDebugOptions, parameters.selectedDebugOptions)
				&& Objects.equals(this.ageStart, parameters.ageStart)
				&& Objects.equals(this.minAgeStart, parameters.minAgeStart)
				&& Objects.equals(this.maxAgeStart, parameters.maxAgeStart)
				&& Objects.equals(this.ageEnd, parameters.ageEnd)
				&& Objects.equals(this.minAgeEnd, parameters.minAgeEnd)
				&& Objects.equals(this.maxAgeEnd, parameters.maxAgeEnd)
				&& Objects.equals(this.yearStart, parameters.yearStart)
				&& Objects.equals(this.yearEnd, parameters.yearEnd)
				&& Objects.equals(this.yearForcedIntoYieldTable, parameters.yearForcedIntoYieldTable)
				&& Objects.equals(this.ageIncrement, parameters.ageIncrement)
				&& Objects.equals(this.minAgeIncrement, parameters.minAgeIncrement)
				&& Objects.equals(this.maxAgeIncrement, parameters.maxAgeIncrement)
				&& Objects.equals(this.combineAgeYearRange, parameters.combineAgeYearRange)
				&& Objects.equals(this.progressFrequency, parameters.progressFrequency)
				&& Objects.equals(this.metadataToOutput, parameters.metadataToOutput)
				&& Objects.equals(this.filters, parameters.filters) //
				&& Objects.equals(this.utils, parameters.utils);
	}

	@Override
	public int hashCode() {
		return Objects.hash(
				outputFormat, selectedExecutionOptions, selectedDebugOptions, ageStart, minAgeStart, maxAgeStart,
				ageEnd, minAgeEnd, maxAgeEnd, yearStart, yearEnd, yearForcedIntoYieldTable, ageIncrement,
				minAgeIncrement, maxAgeIncrement, combineAgeYearRange, progressFrequency, metadataToOutput, utils
		);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("Validated Parameters:\n");
		sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
		sb.append("    selectedExecutionOptions: ").append(toIndentedString(selectedExecutionOptions)).append("\n");
		sb.append("    selectedDebugOptions: ").append(toIndentedString(selectedDebugOptions)).append("\n");
		sb.append("    ageStart: ").append(toIndentedString(ageStart)).append("\n");
		sb.append("    minAgeStart: ").append(toIndentedString(minAgeStart)).append("\n");
		sb.append("    maxAgeStart: ").append(toIndentedString(maxAgeStart)).append("\n");
		sb.append("    ageEnd: ").append(toIndentedString(ageEnd)).append("\n");
		sb.append("    minAgeEnd: ").append(toIndentedString(minAgeEnd)).append("\n");
		sb.append("    maxAgeEnd: ").append(toIndentedString(maxAgeEnd)).append("\n");
		sb.append("    yearStart: ").append(toIndentedString(yearStart)).append("\n");
		sb.append("    yearEnd: ").append(toIndentedString(yearEnd)).append("\n");
		sb.append("    forceYear: ").append(toIndentedString(yearForcedIntoYieldTable)).append("\n");
		sb.append("    ageIncrement: ").append(toIndentedString(ageIncrement)).append("\n");
		sb.append("    minAgeIncrement: ").append(toIndentedString(minAgeIncrement)).append("\n");
		sb.append("    maxAgeIncrement: ").append(toIndentedString(maxAgeIncrement)).append("\n");
		sb.append("    combineAgeYearRange: ").append(toIndentedString(combineAgeYearRange)).append("\n");
		sb.append("    progressFrequency: ").append(toIndentedString(progressFrequency)).append("\n");
		sb.append("    metadataToOutput: ").append(toIndentedString(metadataToOutput)).append("\n");
		sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
		sb.append("    utils: ").append(toIndentedString(utils)).append("\n");

		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces (except the first line).
	 */
	private String toIndentedString(Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	static {
		DEFAULT = new ValidatedParameters();

		DEFAULT.ageStart = null;
		DEFAULT.ageEnd = null;
		DEFAULT.yearStart = null;
		DEFAULT.yearEnd = null;
		DEFAULT.ageIncrement = 1;

		DEFAULT.outputFormat = OutputFormat.CSV_YIELD_TABLE;

		DEFAULT.selectedExecutionOptions = EnumSet.noneOf(ExecutionOption.class);
		// exclude since false: BACK_GROW_ENABLED
		DEFAULT.selectedExecutionOptions.add(FORWARD_GROW_ENABLED);
		DEFAULT.selectedExecutionOptions.add(DO_INCLUDE_PROJECTION_FILES);
		// exclude since false: DO_SAVE_INTERMEDIATE_FILES
		// exclude since false: DO_FORCE_REFERENCE_YEAR_INCLUSION_IN_YIELD_TABLES
		// exclude since false: DO_FORCE_CURRENT_YEAR_INCLUSION_IN_YIELD_TABLES
		// exclude since false: DO_FORCE_CALENDAR_YEAR_INCLUSION_IN_YIELD_TABLES
		DEFAULT.selectedExecutionOptions.add(DO_INCLUDE_FILE_HEADER);
		DEFAULT.selectedExecutionOptions.add(DO_INCLUDE_PROJECTION_MODE_IN_YIELD_TABLE);
		DEFAULT.selectedExecutionOptions.add(DO_INCLUDE_AGE_ROWS_IN_YIELD_TABLE);
		DEFAULT.selectedExecutionOptions.add(DO_INCLUDE_YEAR_ROWS_IN_YIELD_TABLE);
		// exclude since false: DO_INCLUDE_POLYGON_RECORD_ID_IN_YIELD_TABLE
		// exclude since false: DO_SUMMARIZE_PROJECTION_BY_POLYGON
		DEFAULT.selectedExecutionOptions.add(DO_SUMMARIZE_PROJECTION_BY_LAYER);
		// exclude since false: DO_INCLUDE_SPECIES_PROJECTION
		DEFAULT.selectedExecutionOptions.add(DO_INCLUDE_PROJECTED_MOF_VOLUMES);
		// exclude since false: DO_INCLUDE_PROJECTED_MOF_BIOMASS
		// exclude since false: DO_INCLUDE_PROJECTED_CFS_BIOMASS
		DEFAULT.selectedExecutionOptions.add(DO_INCLUDE_COLUMN_HEADERS_IN_YIELD_TABLE);
		DEFAULT.selectedExecutionOptions.add(DO_ALLOW_BA_AND_TPH_VALUE_SUBSTITUTION);
		// exclude since false: DO_INCLUDE_SECONDARY_SPECIES_DOMINANT_HEIGHT_IN_YIELD_TABLE

		// exclude since false: DO_ENABLE_PROGRESS_LOGGING
		// exclude since false: DO_ENABLE_ERROR_LOGGING
		// exclude since false: DO_ENABLE_DEBUG_LOGGING

		DEFAULT.selectedDebugOptions = EnumSet.noneOf(DebugOption.class);
		// exclude since false: selectedDebugOptions.doIncludeDebugTimestamps
		// exclude since false: selectedDebugOptions.doIncludeDebugRoutineNames
		// exclude since false: selectedDebugOptions.doIncludeDebugEntryExit
		// exclude since false: selectedDebugOptions.doIncludeDebugIndentBlocks

		DEFAULT.minAgeStart = 0;
		DEFAULT.maxAgeStart = 600;
		DEFAULT.minAgeEnd = 1;
		DEFAULT.maxAgeEnd = 1000;
		DEFAULT.minYearStart = 1400;
		DEFAULT.maxYearStart = 3250;
		DEFAULT.minYearEnd = 1400;
		DEFAULT.maxYearEnd = 3250;
		DEFAULT.minAgeIncrement = 1;
		DEFAULT.maxAgeIncrement = 350;
		DEFAULT.yearForcedIntoYieldTable = null;
		DEFAULT.combineAgeYearRange = AgeYearRangeCombinationKind.INTERSECT;
		DEFAULT.progressFrequency = new ProgressFrequency().intValue(1000);
		DEFAULT.metadataToOutput = MetadataToOutputDirective.VERSION;
		DEFAULT.filters = new FilterParameters();

		DEFAULT.utils = new HashMap<>();
		for (var sp0Name : SP0Name.values()) {
			DEFAULT.utils.put(sp0Name, UtilizationClassSet._12_5);
		}
	}
}
