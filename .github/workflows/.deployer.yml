name: .Helm Deployer

on:
  workflow_call:
    inputs:
      ### Required
      # Only secrets!

      ### Typical / recommended
      atomic:
        description: Atomic deployment?  That means fail all or nothing
        default: 'true'
        required: false
        type: string
      directory:
        description: Chart directory
        default:  'charts/app'
        required: false
        type: string
      environment:
        description: Environment name; omit for PRs
        required: false
        type: string
      oc_server:
        default: https://api.silver.devops.gov.bc.ca:6443
        description: 'OpenShift server'
        required: false
        type: string
      params:
        description: 'Extra parameters to pass to helm upgrade'
        default: ''
        required: false
        type: string
      ref:
        description: 'Reference for checkout action'
        default: 'main'
        required: false
        type: string
      tag:
        description: Specify a tag to deploy; use SemVer or PR Number
        required: false
        type: string


      ### Usually a bad idea / not recommended
      timeout-minutes:
        description: 'Timeout minutes'
        default: 10
        required: false
        type: number
      values:
        description: 'Values file'
        default: 'values.yaml'
        required: false
        type: string

    secrets:
      oc_namespace:
        required: true
      oc_token:
        required: true
      VITE_SSO_AUTH_SERVER_URL:
        required: true
      VITE_SSO_CLIENT_ID:
        required: true
      VITE_SSO_REALM:
        required: true
      VITE_SSO_REDIRECT_URI:
        required: true
      VITE_API_URL:
        required: true

jobs:
  deployer:
    name: Helm
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-22.04
    steps:
      ### tag and release

      # Variables      
      - name: Set TAG and RELEASE vars for later use
        id: vars
        run: |
          # Vars: tag and release

          # Tag defaults to PR number, but can be overridden by inputs.tag
          tag=${{ inputs.tag }}

          # Release name includes run numbers to ensure uniqueness
          release=${{ github.event.repository.name }}-${{ inputs.environment }}

          # Summary
          echo "tag=${tag}"
          echo "release=${release}"

          # Output
          echo "tag=${tag}" >> $GITHUB_OUTPUT
          echo "release=${release}" >> $GITHUB_OUTPUT

      ### Deploy

      # OC Login
      - name: OpenShift Login
        run: |
          # OC Login
          oc login --token=${{ secrets.oc_token }} --server=${{ inputs.oc_server }}
          oc project ${{ secrets.oc_namespace }} # Safeguard!

      # Only stop pre-existing deployments on PRs (status = pending-upgrade)
      - if: github.event_name == 'pull_request'
        name: Interrupt existing PR based deployments if we are PR based
        run: |
          # Interrupt any previous deployments (PR only)
          PREVIOUS=$(helm status ${{ steps.vars.outputs.release }} -o json | jq .info.status || true)
          if [[ ${PREVIOUS} =~ pending ]]; then
            echo "Rollback triggered"
            helm rollback ${{ steps.vars.outputs.release }} || \
              helm uninstall ${{ steps.vars.outputs.release }}
          fi

      # Package Helm chart
      - name: Checkout Helm Chart
        uses: actions/checkout@v4
        with:
            ref: ${{ inputs.ref || 'main' }}  # fallback if ref is not provided
      - name: Congfigure Helm
        working-directory: ${{ inputs.directory }}
        run: |
          # Helm package
          sed -i 's/^name:.*/name: ${{ github.event.repository.name }}/' Chart.yaml
          helm package -u . --app-version="tag-${{ steps.vars.outputs.tag }}_run-${{ github.run_number }}" --version=${{ steps.vars.outputs.tag }}

      # Deploy Helm chart as atomic, with timeout
      - name: Atomic Helm Deployment
        if: inputs.atomic != 'false'
        working-directory: ${{ inputs.directory }}
        run: |
          # Helm upgrade/rollout - atomic, timeout
          helm upgrade \
            --set-string global.repository=${{ github.repository }} \
            --set-string global.tag=${{ steps.vars.outputs.tag }} \
            ${{ inputs.params }} \
            --set backend.env.QUARKUS_OIDC_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL }}/realms/${{ secrets.VITE_SSO_REALM }} \
            --set frontend.env.VITE_SSO_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL }} \
            --set frontend.env.VITE_SSO_CLIENT_ID=${{ secrets.VITE_SSO_CLIENT_ID }} \
            --set frontend.env.VITE_SSO_REALM=${{ secrets.VITE_SSO_REALM }} \
            --set frontend.env.VITE_SSO_REDIRECT_URI=${{ secrets.VITE_SSO_REDIRECT_URI }} \
            --set frontend.env.VITE_API_URL=${{ secrets.VITE_API_URL }} \
            --install --wait --atomic ${{ steps.vars.outputs.release }} \
            --timeout ${{ inputs.timeout-minutes }}m \
            --values ${{ inputs.values }} \
            ./${{ github.event.repository.name }}-${{ steps.vars.outputs.tag }}.tgz

      # Deploy Helm chart without atomic or timeout
      - name: Non-Atomic Helm Deployment
        if: inputs.atomic == 'false'
        working-directory: ${{ inputs.directory }}
        run: |
          # Helm upgrade/rollout - non-atomic, no timeout
          helm upgrade \
            --set-string global.repository=${{ github.repository }} \
            --set-string global.tag=${{ steps.vars.outputs.tag }} \
            ${{ inputs.params }} \
            ${{ steps.vars.outputs.release }} \
            --set backend.env.QUARKUS_OIDC_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL }}/realm/${{ secrets.VITE_SSO_REALM }} \
            --set frontend.env.VITE_SSO_AUTH_SERVER_URL=${{ secrets.VITE_SSO_AUTH_SERVER_URL }} \
            --set frontend.env.VITE_SSO_CLIENT_ID=${{ secrets.VITE_SSO_CLIENT_ID }} \
            --set frontend.env.VITE_SSO_REALM=${{ secrets.VITE_SSO_REALM }} \
            --set frontend.env.VITE_SSO_REDIRECT_URI=${{ secrets.VITE_SSO_REDIRECT_URI }} \
            --set frontend.env.VITE_API_URL=${{ secrets.VITE_API_URL }} \
            --install --wait --values ${{ inputs.values }} \
            ./${{ github.event.repository.name }}-${{ inputs.tag }}.tgz

      # Helm release history
      - name: Helm Release History
        run: |
          # Helm release history
          helm history ${{ steps.vars.outputs.release }}

      ### Cleanup

      # Completed pod cleanup
      - name: Pod Cleanup
        run: |
          # Completed pod cleanup
          oc delete po --field-selector=status.phase==Succeeded || true
