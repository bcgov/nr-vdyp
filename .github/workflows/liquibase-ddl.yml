name: Liquibase DDL application
run-name: Deploy Liquibase to ${{ inputs.ENVIRONMENT_NAME }}

on:
  workflow_dispatch:
    inputs:
      ENVIRONMENT_NAME:
        required: true
        type: choice
        options:
          - dev
          - test
          - prod
      TAG:
        required: false
        type: string
        default: latest

jobs:

  ddl_dockerbuild:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT_NAME }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta_pr
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/vdyp-liquibase
          tags: |
            type=schedule
            type=raw,value=${{ github.base_ref }}
            type=ref,event=tag
            type=raw,value=${{ inputs.TAG }}
            ${{ toJson(github.event.pull_request.number) == '{}' && format( 'type=raw,value=pr-{0}', github.event.pull_request.number) || '' }} 


      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./db/liquibase
          push: true
          tags: ${{ steps.meta_pr.outputs.tags }}
          labels: ${{ steps.meta_pr.outputs.labels }}
  

  ddl_deploy:
    needs: ddl_dockerbuild
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.ENVIRONMENT_NAME }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: copy liquibase chart files
        run: mkdir staging && cp -r charts/liquibase staging/liquibase

      - name: Fill properties files
        uses: cschleiden/replace-tokens@v1.2
        with:
          files: staging/**/*
        env:
          LICENSE_PLATE: 'c50504'
          NAMESPACE: ${{ secrets.oc_namespace }}
          ENV: ${{ inputs.ENVIRONMENT_NAME }}
          VDYP_DB_USER: ${{ vars.VDYP_DB_ROLE}}
          VDYP_DB_NAME: ${{ vars.VDYP_DB_DATABASE}}

      - name: install helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      #Explicit install of oc cli tool
      - name: Install oc
        uses: redhat-actions/oc-installer@v1

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: https://api.silver.devops.gov.bc.ca:6443
          openshift_token: ${{secrets.oc_token}}
          namespace: ${{ secrets.oc_namespace }}

      - name: zip and install helm chart
        run: |
          cd staging && tar -czvf liquibase.tar.gz liquibase
          helm upgrade -i liquibase-${{inputs.ENVIRONMENT_NAME}} ./liquibase.tar.gz

      
