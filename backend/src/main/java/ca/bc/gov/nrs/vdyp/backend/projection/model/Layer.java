package ca.bc.gov.nrs.vdyp.backend.projection.model;

import java.util.List;
import java.util.UUID;

import ca.bc.gov.nrs.vdyp.backend.projection.model.enumerations.ProjectionType;

/** Identifies information regarding a single layer within a stand. */
public class Layer {
	private UUID layerId;

	/**
	 * This layer will be included in the projection iff this value is <code>true</code>. Typically it is false when it
	 * is a layer that has been combined into another layer.
	 */
	private boolean bIncludeWithProjection;

	/**
	 * Indicates whether or not to suppress projected yields or not. Typically this is determined by the Non-Forest
	 * Descriptor at layer definition. However, this flag could allow for other mechanisms to control the suppression as
	 * well.
	 * <ul>
	 * <li><code>true</code>: All projected per hectare yields will be suppressed. All projected species percents will
	 * be returned as supplied at polygon definition.
	 * <li><code>false</code>: All projected per hectare yields and species percents are returned as they normally would
	 * be.
	 * </ul>
	 */
	private boolean doSuppressPerHAYields;

	/** The layer identifier */
	private String sLayerID;

	/**
	 * Holds the Layer within VDYP7 that this layer was processed as. If not processed within VDYP7, this member will
	 * contain an empty string.
	 * <p>
	 * Note that with layer summarization, multiple layers may be combined into a single layer for processing within
	 * VDYP7. This mechanism will help us to deaggregate that combined layer by informing us which particular layers
	 * make up the combined layer.
	 */
	private String sVDYP7LayerID;

	/** The rank code associated with the layer. Rank "1" indicates the primary layer. */
	private String sRankCode;

	/**
	 * The non-forest descriptor associated with the layer. If one is not associated with the layer or one is not known,
	 * this value should be null.
	 */
	private String sNonForestDesc;

	/** Crown Closure. If not known, should be set to -9.0 */
	private double crownClosure;

	/** Basal Area. If not known, should be set to -9.0 */
	private double basalArea;

	/** Basal Area. If not known, should be set to -9.0 */
	private double treesPerHectare;

	/**
	 * The species associated with the Estimated Site Index value (if any). This value is generated by the SiteTool
	 * library from the actual species code. This value is -1 if no species is associated with estimatedSiteIndex.
	 */
	private int estimatedSiteIndexSpecies;

	/**
	 * The Estimated SI to be used in case the normal SI is not available. If not known, should be set to -9.0.
	 */
	private double estimatedSiteIndex;

	/** This value is (currently) always defined to be 7.5cm+. */
	private double measuredUtilizationLevel;

	/**
	 * If <code>true<code>, the layer is marked as being a 'dead' layer with some component of the stand having been
	 * killed. If <code>false</code> it is a normal, living layer.
	 */
	private boolean isDeadLayer;

	/** The year in which the layer was killed. If the layer is not dead, the value -9 is used. */
	private int yearOfDeath;

	/** The age of the layer at time of death. If not dead, or the value isn't known, it is set to -9.0. */
	private double fAgeAtDeath;

	/** Percentage of layer that's stockable. If not known, it is set to -9.0. */
	private double fPctStockable;

	/**
	 * Lists each of the SP0 (VDYP7) species which *could* be a part of a stand. A dynamically allocated array of SP0
	 * components will be allocated to hold all possible SP0s. Each element will indicate whether or not it truly is a
	 * member of the stand.
	 *
	 * A by-product of this array is that it holds the species in alpabetical order. This array will be used to return
	 * alphabetical SP0 sortings.
	 */
	private List<StandComponent> species;

	/** The Species Groups (Sp0s) currently defined in the stand, sorted in the order they were supplied. */
	private List<StandComponent> sp0sAsSupplied;
	/** The Species Groups (Sp0s) currently defined in the stand, sorted by decreasing percentage. */
	private List<StandComponent> sp0sByPercent;

	/** The Species (Sp64s) currently defined in the stand, sorted in the order they were supplied. */
	private List<SpeciesComponent> sp64sAsSupplied;
	/** The Species (Sp64s) currently defined in the stand, sorted by decreasing percentage. */
	private List<SpeciesComponent> sp64sByPercent;
	/** The Species (Sp64s) currently defined in the stand, sorted by name (a-z). */
	private List<SpeciesComponent> sp64sByName;

	/** The type of projection this layer represents. */
	private ProjectionType assignedProjectionType;

	private SiteSpeciesSorting siteSpeciesOrdering;

	private LayerAdjustments adjustments;

	private LayerYields lastRequestedYield;
	

	public boolean doSuppressPerHAYields() {
		return doSuppressPerHAYields;
	}

	public void setDoSuppressPerHAYields(boolean doSuppressPerHAYields) {
		this.doSuppressPerHAYields = doSuppressPerHAYields;
	}
}
