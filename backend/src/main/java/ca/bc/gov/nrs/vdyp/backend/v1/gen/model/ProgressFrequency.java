/*
 * Variable Density Yield Projection
 * API for the Variable Density Yield Projection service
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ca.bc.gov.nrs.vdyp.backend.v1.gen.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import io.quarkus.runtime.annotations.RegisterForReflection;

/**
 * Identifies how often or when progress will be reported from the application. In the case of a number being supplied,
 * the number indicates the number of polygons to be processed between indications of progress.
 */

@JsonPropertyOrder({ ProgressFrequency.JSON_PROPERTY_INT_VALUE_NAME, ProgressFrequency.JSON_PROPERTY_ENUM_VALUE_NAME })
@RegisterForReflection
public class ProgressFrequency {

	public static final String JSON_PROPERTY_INT_VALUE_NAME = "intValue";
	@JsonProperty(JSON_PROPERTY_INT_VALUE_NAME)
	private Integer intValue;

	public static final String JSON_PROPERTY_ENUM_VALUE_NAME = "enumValue";
	@JsonProperty(JSON_PROPERTY_ENUM_VALUE_NAME)
	private EnumValue enumValue;

	/**
	 * Gets or Sets value
	 */
	public enum EnumValue {
		NEVER("never"), POLYGON("polygon"), MAPSHEET("mapsheet");

		private String value;

		EnumValue(String value) {
			this.value = value;
		}

		@Override
		@JsonValue
		public String toString() {
			return String.valueOf(value);
		}

		@JsonCreator
		public static EnumValue fromValue(String value) {
			for (EnumValue b : EnumValue.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}
	}

	public ProgressFrequency() {
		this.intValue = null;
		this.enumValue = null;
	}

	public ProgressFrequency(EnumValue enumValue) {
		if (this.intValue != null || this.enumValue != null) {
			throw new IllegalStateException("ProgressFreauency already has a value; cannot assign a second");
		}

		this.enumValue = enumValue;
		this.intValue = null;
	}

	public ProgressFrequency(int intValue) {
		if (this.intValue != null || this.enumValue != null) {
			throw new IllegalStateException("ProgressFreauency already has a value; cannot assign a second");
		}

		this.intValue = intValue;
		this.enumValue = null;
	}

	@JsonProperty(JSON_PROPERTY_INT_VALUE_NAME)
	public Integer getIntValue() {
		return intValue;
	}

	public void setIntValue(Integer intValue) {
		this.intValue = intValue;
	}

	@JsonProperty(JSON_PROPERTY_ENUM_VALUE_NAME)
	public EnumValue getEnumValue() {
		return enumValue;
	}

	public void setEnumValue(EnumValue enumValue) {
		this.enumValue = enumValue;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}

		ProgressFrequency other = (ProgressFrequency) o;

		return other.intValue == this.intValue && other.enumValue == this.enumValue;
	}

	@Override
	public int hashCode() {
		return intValue != null ? intValue.hashCode() : enumValue != null ? enumValue.hashCode() : 17;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class ParametersProgressFrequency {\n");
		if (intValue != null)
			sb.append(intValue).append("\n");
		else if (enumValue != null)
			sb.append(enumValue).append("\n");
		sb.append("}");
		return sb.toString();
	}
}
