# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
#-- global variables, can be accessed by sub-charts.
global:
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level.
  repository: ~ # provide the repo name from where images will be sourced for example bcgo
  #-- the registry where the images are stored. override during runtime for other registry at global level or individual level. default is ghcr.io
  registry: ghcr.io # ghcr.io for directly streaming from github container registry or "artifacts.developer.gov.bc.ca/github-docker-remote" for artifactory, or any other registry.
  #-- the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
  tag: ~
  #-- turn off autoscaling for the entire suite by setting this to false. default is true.
  autoscaling: true
  #-- global secrets, can be accessed by sub-charts.
  secrets:
    enabled: true
    databasePassword: ~
    databaseUser: ~
    databaseName: ~
    COMS_DB_PASSWORD: ~
    VDYP_DB_PASSWORD: ~
    BATCH_DB_PASSWORD: ~
    persist: true
  #-- domain of the application, it is required, apps.silver.devops.gov.bc.ca for silver cluster and apps.devops.gov.bc.ca for gold cluster
  domain: "apps.silver.devops.gov.bc.ca" # it is apps.gold.devops.gov.bc.ca for gold cluster
  #-- the database Alias gives a nice way to switch to different databases, crunchy, patroni ... etc.
  databaseAlias: bitnami-pg
  postgresql:
    auth:
      password: unused
#-- the components of the application, backend.
backend:
  #-- enable or disable backend
  enabled: true
  #-- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate
  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 1
    #-- the maximum number of replicas.
    maxReplicas: 3
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
  #-- vault, for injecting secrets from vault. it is optional and is an object. it creates an initContainer which reads from vault and app container can source those secrets. for referring to a working example with vault follow this link: https://github.com/bcgov/onroutebc/blob/main/charts/onroutebc/values.yaml#L171-L186
  vault:
    #-- enable or disable vault.
    enabled: false
    #-- the role of the vault. it is required, #licenseplate-prod or licenseplate-nonprod, license plate is the namespace without env
    role: ~
    #-- the vault path where the secrets live. it is required, dev/api-1, dev/api-2, test/api-1 etc...
    secretPaths:
      - dev/api-1
      - dev/api-2
      - test/api-1
      - test/api-2
      - prod/api-1
      - prod/api-2
    #-- resources specific to vault initContainer. it is optional and is an object.
    resources:
      limits:
        cpu: 250m
        memory: 50Mi
      requests:
        cpu: 50m
        memory: 25Mi
  #-- the service for the component. for inter namespace communication, use the service name as the hostname.
  service:
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    port: 80 # this is the service port, where it will be exposed internal to the namespace.
    targetPort: 8080 # this is container port where app listens on
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.
  env:
    QUARKUS_OIDC_AUTH_SERVER_URL: ~

frontend:
  fullnameOverride: "vdyp-ui-dev"
  # -- enable or disable a component deployment.
  enabled: true
  # -- the deployment strategy, can be "Recreate" or "RollingUpdate"
  deploymentStrategy: Recreate

  #-- autoscaling for the component. it is optional and is an object.
  autoscaling:
    #-- enable or disable autoscaling.
    enabled: true
    #-- the minimum number of replicas.
    minReplicas: 1
    #-- the maximum number of replicas.
    maxReplicas: 3
    #-- the target cpu utilization percentage, is from request cpu and NOT LIMIT CPU.
    targetCPUUtilizationPercentage: 80
  #-- the service for the component. for inter namespace communication, use the service name as the hostname.
  service:
    #-- enable or disable the service.
    enabled: true
    #-- the type of the service. it can be ClusterIP, NodePort, LoadBalancer, ExternalName. ClusterIP is the default and is recommended.
    type: ClusterIP
    #-- the ports for the service.
    ports:
      - name: http
        #-- the port for the service. the service will be accessible on this port within the namespace.
        port: 80
        #-- the container port where the application is listening on
        targetPort: 3000
        #-- the protocol for the port. it can be TCP or UDP. TCP is the default and is recommended.
        protocol: TCP
      - port: 3003
        targetPort: 3003
        protocol: TCP
        name: metrics
  ingress:
    annotations:
      haproxy.router.openshift.io/timeout: 1800s # 30 minues
      route.openshift.io/termination: "edge"
  pdb:
    enabled: false # enable it in PRODUCTION for having pod disruption budget.
    minAvailable: 1 # the minimum number of pods that must be available during the disruption budget.
  env:
    VITE_SSO_AUTH_SERVER_URL: ~
    VITE_SSO_CLIENT_ID: ~
    VITE_SSO_REALM: ~
    VITE_SSO_REDIRECT_URI: ~
    VITE_API_URL: ~

bitnami-pg:
  enabled: false
  image:
    registry: ghcr.io
    repository: bcgov/nr-containers/bitnami/postgresql
    tag: 15.8.0
  auth:
    existingSecret: '{{ .Release.Name }}'
    username: ~
    database: ~
  shmVolume:
    enabled: false
  backup:
    enabled: false
    cronjob:
      containerSecurityContext: { }
      podSecurityContext:
        enabled: false
      storage:
        size: 200Mi
  primary:
    persistence:
      enabled: true
      storageClass: netapp-block-standard
      accessModes:
        - ReadWriteOnce
      size: 100Mi
    containerSecurityContext:
      enabled: false
    podSecurityContext:
      enabled: false
    initdb:
      scriptsSecret: '{{ .Release.Name }}-initdb-scripts'

    resources:
      requests:
        cpu: 50m
        memory: 150Mi
      limits:
        cpu: 150m
        memory: 250Mi

backup:
  enabled: true
  pvc:
    enabled: true
    size: 256Mi
    storageClassName: netapp-file-standard
    accessModes: ReadWriteOnce
  cronjob:
    enabled: true
    volumes:
      - name: "{{.Release.Name}}-backup"
        persistentVolumeClaim:
          claimName: "{{.Release.Name}}-backup"
    restartPolicy: "Never"
    schedule: "0 0 * * *"
    concurrencyPolicy: "Replace"
    failedJobsHistoryLimit: 7
    successfulJobsHistoryLimit: 30
    startingDeadlineSeconds: 3600
  containers:
    - name: backup
      registry: 'docker.io'
      repository: 'bcgovimages' # example, it includes registry and repository
      image: backup-container # the exact component name, be it backend, api-1 etc...
      tag: latest # the tag of the image, it can be latest, 1.0.0 etc..., or the sha256 hash
      command:
        - "/bin/bash"
        - "-c"
        - "/backup.sh -1"
      volumeMounts:
        - mountPath: "/backups/"
          name: "{{.Release.Name}}-backup"
      env:
        fromValues:
          - name: BACKUP_DIR
            value: "/backups/"
          - name: BACKUP_STRATEGY
            value: "rolling"
          - name: NUM_BACKUPS
            value: '5'
          - name: DAILY_BACKUPS
            value: '7'
          - name: WEEKLY_BACKUPS
            value: '4'
          - name: MONTHLY_BACKUPS
            value: '1'
          - name: DATABASE_SERVICE_NAME # depends on which chart being used, adjust accordingly.
            value: '{{.Release.Name}}-{{.Values.global.databaseAlias}}'
          - name: DEFAULT_PORT
            value: "5432"
        fromGlobalSecret:
          - name: DATABASE_PASSWORD
            key: password
          - name: POSTGRESQL_DATABASE
            key: databaseName
          - name: DATABASE_USER
            key: databaseUser
      resources:
        limits:
          cpu: 50m
          memory: 256Mi
        requests:
          cpu: 20m
          memory: 128Mi

coms:
  enabled: true
  db_secret: crunchy-postgres-dev-pguser-coms
  image:
    repository: ghcr.io/bcgov/common-object-management-service
    tag: ~
  replicas: 1
  resources:
    requests:
      cpu: 50m
      memory: 150Mi
    limits:
      cpu: 250m
      memory: 250Mi
  service:
    port: 3000
  route:
    enabled: true
    tls: edge
  env:
    OBJECTSTORAGE_ENABLED: ~
    OBJECTSTORAGE_ACCESSKEYID: ~
    OBJECTSTORAGE_SECRETACCESSKEY: ~
    OBJECTSTORAGE_BUCKET: ~
    OBJECTSTORAGE_ENDPOINT: ~
    OBJECTSTORAGE_KEY: ~
    S3ACCESSMODE_ENABLED: ~
    BASICAUTH_ENABLED: ~
    BASICAUTH_USERNAME: ~
    BASICAUTH_PASSWORD: ~

  batch:
    enabled: true
    env:
      BATCH_DB_USER: ~
      BATCH_DB_DATABASE: ~

