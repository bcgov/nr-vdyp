apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "liquibase.fullname" . }}
  labels:
    {{- include "liquibase.labels" . | nindent 4 }}
spec:
  backoffLimit: {{ .Values.job.backoffLimit }}
  ttlSecondsAfterFinished: {{ .Values.job.ttlSecondsAfterFinished }}
  template:
    metadata:
      labels:
        {{- include "liquibase.selectorLabels" . | nindent 8 }}
    spec:
      restartPolicy: Never
      containers:
        - name: vdyp-liquibase-#{ENV}#
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            # Pull credentials from the PGO-created secret
            - name: LIQUIBASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.crunchy.pguserSecretName }}
                  key: user
            - name: LIQUIBASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.crunchy.pguserSecretName }}
                  key: password
            - name: LIQUIBASE_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.crunchy.pguserSecretName }}
                  key: jdbc-uri
            - name: LIQUIBASE_DBNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.crunchy.pguserSecretName }}
                  key: dbname
            - name: LIQUIBASE_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.crunchy.pguserSecretName }}
                  key: port
            - name: LIQUIBASE_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.crunchy.pguserSecretName }}
                  key: host
          command: ["/bin/sh","-c"]
          args:
            - |
              export PGPASSWORD="${LIQUIBASE_PASSWORD}"
              echo "Waiting for PostgreSQL at ${LIQUIBASE_HOST}:${LIQUIBASE_PORT}..."
              for i in $(seq 1 60); do
                if /usr/bin/env pg_isready -h ${LIQUIBASE_HOST} -p ${LIQUIBASE_PORT} -d ${LIQUIBASE_DBNAME} >/dev/null 2>&1; then
                  break
                fi
                sleep 2
              done
              
              echo "Running Liquibase {{ .Values.liquibase.command }}..."
              liquibase \
                --log-level={{ .Values.liquibase.logLevel }} \
                --url="${LIQUIBASE_URI}&currentSchema=%22app-vdyp%22" \
                {{- range .Values.liquibase.extraArgs }}
                {{ . }} \
                {{- end }}
                {{ .Values.liquibase.command }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}

